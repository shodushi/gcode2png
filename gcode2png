#!/usr/bin/env python
from gcodeParser import *
import sys, time, os
from mayavi import mlab
from tvtk.api import tvtk
import logging
from PIL import Image


logger = logging.getLogger('gcodeParser')
logger.setLevel(level=logging.CRITICAL)
logger2 = logging.getLogger('tvtk')
logger2.setLevel(level=logging.CRITICAL)
logger3 = logging.getLogger('mayavi')
logger3.setLevel(level=logging.CRITICAL)



class GcodeRenderer:
	def __init__(self):
		self.imgwidth = 800
		self.imgheight = 600

		self.path = ""
		self.support = ""
		self.moves = ""
		self.show = ""
		self.coords = dict()
		self.coords['object'] = {}
		self.coords['moves'] = {}
		self.coords['support'] = {}
		self.coords['object']['x'] = []
		self.coords['object']['y'] = []
		self.coords['object']['z'] = []
		self.coords['moves']['x'] = []
		self.coords['moves']['y'] = []
		self.coords['moves']['z'] = []
		self.coords['support']['x'] = []
		self.coords['support']['y'] = []
		self.coords['support']['z'] = []

		self.bedsize = [210, 210]
		red = (1, 0, 0)
		lightgrey = (0.7529, 0.7529, 0.7529)
		blue = (0, 0.4980, 0.9960)
		mediumgrey = (0.7, 0.7, 0.7)
		self.supportcolor = lightgrey
		self.extrudecolor = blue
		self.bedcolor = mediumgrey
		self.movecolor = red

	def run(self, path, support, moves, bed, show, azimuth=320, elevation=70, distance=20, focalpoint=None):
		print("RUN...")
		self.path = path
		self.support = support
		self.moves = moves
		self.createScene(show)
		if bed == "true":
			self.createBed()
		self.loadModel(self.path)
		self.plotModel()
		self.plotSupport()

		#
		if not focalpoint:
			focalpoint = (self.bedsize[0]/2, self.bedsize[1]/2, 20)
		if show == "true":
			self.showScene(focalpoint, azimuth, elevation, distance)
		else:
			self.save(azimuth, elevation, distance, focalpoint)

	def loadModel(self, path):
		parser = GcodeParser()
		model = parser.parseFile(path)
		for layer in model['object'].layers:
			for seg in layer.segments:
				if seg.style == "extrude":
					self.coords['object']['x'].append(seg.coords["X"])
					self.coords['object']['y'].append(seg.coords["Y"])
					self.coords['object']['z'].append(seg.coords["Z"])
				if self.moves == "true":
					if seg.style == "fly":
						self.coords['moves']['x'].append(seg.coords["X"])
						self.coords['moves']['y'].append(seg.coords["Y"])
						self.coords['moves']['z'].append(seg.coords["Z"])
		if self.support == "true":
			for layer in model['support'].layers:
				for seg in layer.segments:
					self.coords['support']['x'].append(seg.coords["X"])
					self.coords['support']['y'].append(seg.coords["Y"])
					self.coords['support']['z'].append(seg.coords["Z"])

	def createScene(self, is_headless):
		if is_headless == 'false':
			# make it headless
			mlab.options.offscreen = True
		fig1 = mlab.figure(bgcolor=(1, 1, 1), size=(self.imgwidth, self.imgheight))
		fig1.scene.parallel_projection = False
		fig1.scene.render_window.point_smoothing = False
		fig1.scene.render_window.line_smoothing = False
		fig1.scene.render_window.polygon_smoothing = False
		fig1.scene.render_window.multi_samples = 8
		if is_headless != 'false':
			fig1.scene.show_axes = False

	def createBed(self):
		x1, y1, z1 = (0, 210, 0.1)  # | => pt1
		x2, y2, z2 = (210, 210, 0.1)  # | => pt2
		x3, y3, z3 = (0, 0, 0.1)  # | => pt3
		x4, y4, z4 = (210, 0, 0.1)  # | => pt4
		bed = mlab.mesh([[x1, x2], [x3, x4]], [[y1, y2], [y3, y4]], [[z1, z2], [z3, z4]], color=self.bedcolor)
		img = tvtk.JPEGReader(file_name=sys.path[0]+"/bed_texture.jpg")
		texture = tvtk.Texture(input_connection=img.output_port, interpolate=1, repeat=0)
		bed.actor.actor.texture = texture
		bed.actor.tcoord_generator_mode = 'plane'

	def plotModel(self):
		mlab.plot3d(self.coords['object']['x'], self.coords['object']['y'], self.coords['object']['z'], color=self.extrudecolor, line_width=2.0, representation='wireframe')
		if len(self.coords['moves']['x']) > 0:
			mlab.plot3d(self.coords['moves']['x'], self.coords['moves']['y'], self.coords['moves']['z'], color=self.movecolor, line_width=2.0, representation='wireframe')

	def plotSupport(self):
		if len(self.coords['support']['x']) > 0:
			mlab.plot3d(self.coords['support']['x'], self.coords['support']['y'], self.coords['support']['z'], color=self.supportcolor, tube_radius=0.5)

	def showScene(self, focalpoint, azimuth=320, elevation=70, distance=20):

		mlab.view(azimuth, elevation)
		mlab.view(distance=distance)
		mlab.view(focalpoint=focalpoint)
		mlab.show()

	def save(self, azimuth, elevation, distance, focalpoint):
		print("SAVING...")
		mlab.view(azimuth, elevation)
		mlab.view(distance=distance)
		mlab.view(focalpoint=focalpoint)
		img_path = self.path.replace("gcode", "png")
		mlab.savefig(filename=img_path)
		
		#mlab.savefig(img_path, size=(800, 600))
		#return
		mlab.close(all=True)
		
		basewidth = 800
		img = Image.open(img_path)
		wpercent = (basewidth/float(img.size[0]))
		hsize = int((float(img.size[1])*float(wpercent)))
		img = img.resize((basewidth, hsize), Image.ANTIALIAS)
		img.save(img_path)


def createImage(path, support, moves, bed, show, azimuth, elevation, distance, focalpoint):
	if len(sys.argv) < 2:
		renderer = GcodeRenderer()
		renderer.run(path, support, moves, bed, show, azimuth, elevation, distance, focalpoint)
		exit(0)
	if "batch" in sys.argv[1] and "=" not in sys.argv[2]:
		path = sys.argv[2]

		files = []
		# r=root, d=directories, f = files
		for r, d, f in os.walk(path):
			for file in f:
				if '.gcode' in file:
					files.append(os.path.join(r, file))
		for f in files:
			print(f)
			path = f
			renderer = GcodeRenderer()
			renderer.run(path, support, moves, bed, show)

	elif "=" not in sys.argv[1]:
		path = sys.argv[1]
		for arg in sys.argv:
			if "support=" in arg:
				support = arg.replace("support=", "")
			if "moves=" in arg:
				moves = arg.replace("moves=", "")
			if "bed=" in arg:
				bed = arg.replace("bed=", "")
			if "show=" in arg:
				show = arg.replace("show=", "")
			if "distance" in arg:
				try:
					distance = float(arg.replace("distance=", ""))
				except ValueError:
					print ("[Error]: wrong usage of the distance argument...")
					exit(1)
			if "elevation" in arg:
				try:
					elevation = float(arg.replace("elevation=", ""))
				except ValueError:
					print ("[Error]: wrong usage of the elevation argument...")
					exit(1)
			if "azimuth" in arg:
				try:
					elevation = float(arg.replace("azimuth=", ""))
				except ValueError:
					print ("[Error]: wrong usage of the azimuth argument...")
					exit(1)
			if "focalpoint" in arg:
				try:
					focalpoint_string = arg.replace("focalpoint=", "")
					focalpoints = focalpoint_string.split(',')
					focalpoint = (float(focalpoints[0]), float(focalpoints[1]), float(focalpoints[2]))
					print(focalpoint)
				except ValueError:
					print ("[Error]: wrong usage of the focalpoint argument...")
					exit(1)

		renderer = GcodeRenderer()
		renderer.run(path, support, moves, bed, show, azimuth, elevation, distance, focalpoint)
	else:
		print("wrong usage")


if __name__ == '__main__':
	# by default the arguments will have this values...
	path = "test.gcode"
	support = "true"
	moves = "false"
	bed = "true"
	show = "false"
	distance = 20
	azimuth = 320
	elevation = 70
	focalpoint = (100,100,25)

	createImage(path, support, moves, bed, show, azimuth, elevation, distance, focalpoint)

	
